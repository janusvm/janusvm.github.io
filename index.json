[{"authors":null,"categories":[],"content":" Imagine the following situation:\nYou have a bunch of files that are being built by the same rule in a Makefile, but some of them further depend on some other input files. It\u0026rsquo;s far from the most of the targets that have these dependences, and those that do depend on different subsets of the extra dependences. How should the Makefile for this look?\nI found myself in this very situation not long ago, when I was working on the slides for my Git Workshop, which included a lot of SVG figures depicting commit graphs. Each of these figures were generated from a .tex file using Latexmk, so the associated build targets and rule looked something like this:\nSVG := $(patsubst %.tex,%.svg,$(wildcard figs/*.tex)) $(SVG): %.svg: %.tex @cd figs \u0026amp;\u0026amp; \\ latexmk -pdf -quiet $(\u0026lt;F) \u0026amp;\u0026amp; \\ pdf2svg $(\u0026lt;F:.tex=.pdf) $(@F) \u0026amp;\u0026amp; \\ latexmk -C $(\u0026lt;F)  The first line defines a list of the eventual SVG files by looking up all the .tex files in subdirectory figs and changing their file extensions to .svg. In the next line, a static pattern rule is telling Make to use the pattern %.svg: %.tex only for the targets defined in that list. The files are built by compiling a PDF with pdflatex (via latexmk), converting that into an SVG with pdf2svg, and finally deleting all the auxiliary build files again with latexmk.\nSo far so good, but there was one problem: in a few of those SVGs, I included some icons in the form of PDFs from another subdirectory figs/icons. To make a long story short, I wanted to use some FontAwesome icons for certain things, which required me to compile with xelatex, but the graphs in the SVGs got messed up, if I didn\u0026rsquo;t use pdflatex for those.\nSo, as a compromise, I compiled PDF files for each of the FA symbols I needed and input them with \\includegraphics in the graphs, adding the following lines to my Makefile:\nPDF := $(patsubst %.tex,%.pdf,$(wildcard figs/icons/*.tex)) $(PDF): %.pdf: %.tex @cd figs/icons \u0026amp;\u0026amp; \\ latexmk -xelatex -quiet $(\u0026lt;F) \u0026amp;\u0026amp; \\ latexmk -c $(\u0026lt;F)  Same as before, except it uses xelatex (again via latexmk) to compile, and there\u0026rsquo;s no conversion to SVG.\nThe question was now: how do I express the relationship between the PDF icons and the SVG figures in my Makefile?\nAttempt 1: just slapping it in there My first impulse was to simply add the PDF list as a dependency to SVG. Simple.\n$(SVG): %.svg: %.tex $(PDF)  And sure, it worked, but it caused every single SVG figure to be rebuilt if any PDF icon had been changed. No good.\nAttempt 2: adding an additional rule to a subset of the SVGs Then, I had the idea to peek a bit in the files to determine which of the SVG targets should actually depend on PDF, taking advantage of the fact that you can define multiple rules for the same target (as long as you only have one build recipe):\nSVG_WITH_ICONS := $(shell grep -l '\\\\includegraphics' figs/*.tex) $(SVG_WITH_ICONS): $(PDF)  Adding these two lines improved the situation slightly; only the targets that included at least one PDF icon were rebuilt when the PDF changed, but still all of them for any PDF. Hmm.\nAttempt 3: enter metaprogramming Long after I gave the talk those figures were for, I finally found an acceptable solution for the problem: Make\u0026rsquo;s eval function.\nPut shortly, you can define a rule which is deferred and can be expanded (eval\u0026lsquo;ed) in a different context. This was exactly what I needed, as it allowed me to write automatic, extra rules for each individual SVG target! Here\u0026rsquo;s how:\ndefine PDF_RULE $T: $(shell grep -hoE '\\bicons/.+\\b' $(T:.svg=.tex) \\ | sort -u | sed -e 's/$$/.pdf/g' -e 's/^/figs\\//g' \\ | paste -s -d ' ') endef $(foreach T,$(SVG),$(eval $(PDF_RULE)))  There\u0026rsquo;s a lot going on in PDF_RULE, so here\u0026rsquo;s a breakdown:\n $T is a variable to be expanded later into the individual files in SVG grep -hoE '\\bicons/.+\\b' $(T:.svg=.tex) prints all the occurences of a string starting with \u0026lsquo;icons/\u0026rsquo; in the corresponding .tex file as individual lines, e.g.\nicons/user icons/laptop icons/server  sort -u sorts the lines and (more importantly) deletes duplicates\n sed -e 's/$$/.pdf/g' -e 's/^/figs\\//g' first appends .pdf to the end ($) of the lines, then prepends figs/ to the beginning (^), e.g.\nfigs/icons/user.pdf figs/icons/laptop.pdf figs/icons/server.pdf  (since $ is a special character used for expansion in Make, you have to put $$ to treat it as a literal $ symbol)\n lastly, paste -s -d ' ' collapses the lines into one line, separated by spaces\n  When the foreach loop is run, the contents of PDF_RULE is expanded for each of the files in SVG, resulting in new rules being added at runtime. So for example, when expanded for a file which doesn\u0026rsquo;t include any PDFs, e.g. figs/git-add.svg, it produces the empty rule\nfigs/git-add.svg:  which does nothing. However, when expanded for a file which does include PDFs, e.g. figs/git-push.svg, the shell command looks through figs/git-push.tex, finds the included graphics icons/laptop.pdf and icons/server.pdf and creates the rule\nfigs/git-push.svg: figs/icons/laptop.pdf figs/icons/server.pdf  which causes figs/git-push.svg to be rebuilt whenever those specific PDFs are changed. So basically, this corresponds to manually writing out rules for each individual SVG file, but it\u0026rsquo;s all done automatically!\nHere\u0026rsquo;s the full Makefile:\nSVG := $(patsubst %.tex,%.svg,$(wildcard figs/*.tex)) PDF := $(patsubst %.tex,%.pdf,$(wildcard figs/icons/*.tex)) all: $(SVG) define PDF_RULE $T: $(shell grep -hoE '\\bicons/.+\\b' $(T:.svg=.tex) \\ | sort -u | sed -e 's/$$/.pdf/g' -e 's/^/figs\\//g' \\ | paste -s -d ' ') endef $(foreach T,$(SVG),$(eval $(PDF_RULE))) $(SVG): %.svg: %.tex @cd figs \u0026amp;\u0026amp; \\ latexmk -pdf -quiet $(\u0026lt;F) \u0026amp;\u0026amp; \\ pdf2svg $(\u0026lt;F:.tex=.pdf) $(@F) \u0026amp;\u0026amp; \\ latexmk -C $(\u0026lt;F) $(PDF): %.pdf: %.tex @cd figs/icons \u0026amp;\u0026amp; \\ latexmk -xelatex -quiet $(\u0026lt;F) \u0026amp;\u0026amp; \\ latexmk -c $(\u0026lt;F) clean: @rm -f $(SVG) @rm -f $(PDF) @cd figs \u0026amp;\u0026amp; latexmk -C @cd figs/icons \u0026amp;\u0026amp; latexmk -C .PHONY: all clean  As a final comment, I should probably point out that I use GNU Make — I\u0026rsquo;m not sure if any of the above features are GNU specific.\n","date":1540598400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540598400,"objectID":"19bd8f1f82e60867c6ef102c01799837","permalink":"https://janusvm.github.io/2018/10/adding-dependencies-on-the-fly-in-a-makefile/","publishdate":"2018-10-27T00:00:00Z","relpermalink":"/2018/10/adding-dependencies-on-the-fly-in-a-makefile/","section":"post","summary":"Imagine the following situation:\nYou have a bunch of files that are being built by the same rule in a Makefile, but some of them further depend on some other input files. It\u0026rsquo;s far from the most of the targets that have these dependences, and those that do depend on different subsets of the extra dependences. How should the Makefile for this look?\nI found myself in this very situation not long ago, when I was working on the slides for my Git Workshop, which included a lot of SVG figures depicting commit graphs.","tags":["makefile","metaprogramming"],"title":"Adding dependencies on the fly in a Makefile","type":"post"},{"authors":null,"categories":["R"],"content":" Second time\u0026rsquo;s the charm, right?\nLast time I made an attempt at getting my github.io site up and running, it ended up being half-baked and I left it unused for over a year. In the meantime, my number of repositories with GitHub Pages steadily increased, resulting in a bunch of janusvm.github.io/repo links that were nowhere to be found on what ought to be the root site.\nAfter giving three talks this month, each with slides on GH Pages, I decided it was time to organise my stuff and update this website. Being an R enthusiast, it was a no-brainer for me to use blogdown, and following the recommendation in the book, I opted for the Academic Hugo theme for its nice defaults, extra features, and customisation options.\nTheme customisations The Academic theme has eight built-in colour themes and three font themes, but none of them hit the mark 100% for me. When it comes to colour themes, I\u0026rsquo;m hopelessly in love with Nord — I use it for Emacs, Bash, and whatever else that lets me configure its interface colours. Here\u0026rsquo;s how I\u0026rsquo;ve set it up on this site:\nIn a file called /data/themes/nord.toml:\n# Theme metadata name = \u0026quot;Nord\u0026quot; # Is theme light or dark? light = true # Primary primary = \u0026quot;#bf616a\u0026quot; primary_light = \u0026quot;#d08770\u0026quot; primary_dark = \u0026quot;#a5545b\u0026quot; # Menu menu_primary = \u0026quot;#3b4252\u0026quot; menu_text = \u0026quot;#eceff4\u0026quot; menu_text_active = \u0026quot;#88c0d0\u0026quot; menu_title = \u0026quot;#eceff4\u0026quot; # Home sections home_section_odd = \u0026quot;#fff\u0026quot; home_section_even = \u0026quot;#eff2f7\u0026quot;  and then in my config.toml:\ncolor_theme = \u0026quot;nord\u0026quot;  This sets the colours of just about everything except for code blocks. Highlight.js does have the Nord theme, but it turns out it isn\u0026rsquo;t on the CDNJS server yet, which means that you can\u0026rsquo;t just put highlight_style = \u0026quot;nord\u0026quot; in config.toml.\nInstead, download nord.css from the repository, put it in /static/css, and add \u0026quot;nord.css\u0026quot; to the custom_css array in the config, e.g.\ncustom_css = [\u0026quot;nord.css\u0026quot;, \u0026quot;fonts/iosevka.css\u0026quot;, \u0026quot;custom.css\u0026quot;]  The other two CSS files in there define the Iosevka font face and some miscellaneous adjustments, respectively. I have used many different monospace fonts for coding, but after recently discovering Iosevka, I may finally have found a font to settle down with.\nThe fonts used on the site are customised via the file /data/fonts/custom.toml:\n# Font style metadata name = \u0026quot;Custom\u0026quot; # Optional Google font URL google_fonts = \u0026quot;Abel|Roboto:400,400italic,700|Roboto+Condensed:300\u0026quot; # Font families heading_font = \u0026quot;Abel\u0026quot; body_font = \u0026quot;Roboto\u0026quot; nav_font = \u0026quot;Roboto Condensed\u0026quot; mono_font = \u0026quot;Iosevka SS04 Web\u0026quot; # Font size font_size = \u0026quot;20\u0026quot; font_size_small = \u0026quot;16\u0026quot;  and the config entry:\nfont = \u0026quot;custom\u0026quot;  Deployment It turns out to be relatively simple to have the source files in one repository and the published site in another, if you\u0026rsquo;re comfortable using git submodules:\n Create the repository user.github.io on GitHub (where user is your username) If you don\u0026rsquo;t initialise it with any files, push an empty commit (from a temporary folder somewhere else) to it first:\ngit init git commit -m \u0026quot;Initial commit\u0026quot; --allow-empty git remote add origin https://github.com/user/user.github.io.git git push -u origin master  From the folder with your blog source (assuming it\u0026rsquo;s already a git repository), add user.github.io as a submodule in /public:\nrm -rf public git submodule add -b master https://github.com/user/user.github.io.git public  Build the site:\nhugo  Commit and push the submodule:\ncd public git add . git commit -m \u0026quot;Build site\u0026quot; git push -u origin master   After that, the site is deployed. In my experience, GitHub Pages sometimes don\u0026rsquo;t actually build the site the first time you push after activating Pages, so if nothing shows up after a few minutes, try pushing another commit.\nLinks I found this post by Leslie Myint in addition to Hugo\u0026rsquo;s hosting guide and the Academic theme documentation to be very helpful when setting up this site.\n","date":1540425600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540425600,"objectID":"7ac122788443ce304b57338822cd7e64","permalink":"https://janusvm.github.io/2018/10/hello-world-2/","publishdate":"2018-10-25T00:00:00Z","relpermalink":"/2018/10/hello-world-2/","section":"post","summary":"Second time\u0026rsquo;s the charm, right?\nLast time I made an attempt at getting my github.io site up and running, it ended up being half-baked and I left it unused for over a year. In the meantime, my number of repositories with GitHub Pages steadily increased, resulting in a bunch of janusvm.github.io/repo links that were nowhere to be found on what ought to be the root site.\nAfter giving three talks this month, each with slides on GH Pages, I decided it was time to organise my stuff and update this website.","tags":["blogdown"],"title":"Hello World! (2)","type":"post"},{"authors":["Janus Valberg-Madsen","Mads Lindskou"],"categories":null,"content":" Intended audience First year Math/Math-Econ/Math-Tech students at Aalborg University.\n","date":1540418400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540418400,"objectID":"66e2bc0765ac06ecd6fce6953bf7481c","permalink":"https://janusvm.github.io/talk/aau-git-workshop/","publishdate":"2018-10-25T00:00:00+02:00","relpermalink":"/talk/aau-git-workshop/","section":"talk","summary":"When you work on a large group project, it can be advantageous to keep track of changes with a _version control system_.\nGit is the most widespread of such systems, and web platforms like GitHub make it easy to overview and collaborate.\nWith Git and GitHub not only do you have a complete backup of your project and its history, but you have a structured way to access old versions of files, reviwing changes before applying them, and much, much more.\n\nThis workshop will aim to:\n\n- show you the idea behind version control\n- teach you basic Git commands\n- introduce you to a Git-based workflow for project writing\n- get your own project repositories set up and ready\n","tags":["teaching","git"],"title":"Git Workshop","type":"talk"},{"authors":["Janus Valberg-Madsen","Mads Lindskou"],"categories":null,"content":" Intended audience First year Math/Math-Econ/Math-Tech students at Aalborg University.\n","date":1540418400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540418400,"objectID":"e8026bb0bb04c5f42d8d65cc3d38c241","permalink":"https://janusvm.github.io/talk/aau-latex-workshop/","publishdate":"2018-10-25T00:00:00+02:00","relpermalink":"/talk/aau-latex-workshop/","section":"talk","summary":"LaTeX is a typesetting system which is widely used in academia, and on AAU, you are expected to use it.\nThis compilation based way of writing offers many advantages over WYSIWYG editors like MS Word, such as cross-platform compatibility, editor agnosticism, extensibility, and version control friendly format.\n\nThis workshop will aim to:\n\n* show you a bit about _how_ LaTeX works\n* show you how to structure a group project\n* prepare you for the upcoming semester project with a project template\n","tags":["teaching","latex"],"title":"LaTeX Workshop","type":"talk"},{"authors":null,"categories":null,"content":" Slides from my Git Workshop: janusvm.github.io/aau-git-workshop\n Very simple introduction to Git: think-like-a-git.net\n More comprehensive tutorials: www.atlassian.com/git/tutorials\n Tips on writing commit messages: chris.beams.io/posts/git-commit\n Fixing mistakes: sethrobertson.github.io/GitFixUm/fixup.html\n  ","date":1540418400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540418400,"objectID":"ddcb92a8c060b696245e3af502bd4ed7","permalink":"https://janusvm.github.io/resource/git-links/","publishdate":"2018-10-25T00:00:00+02:00","relpermalink":"/resource/git-links/","section":"resource","summary":" Slides from my Git Workshop: janusvm.github.io/aau-git-workshop\n Very simple introduction to Git: think-like-a-git.net\n More comprehensive tutorials: www.atlassian.com/git/tutorials\n Tips on writing commit messages: chris.beams.io/posts/git-commit\n Fixing mistakes: sethrobertson.github.io/GitFixUm/fixup.html\n  ","tags":null,"title":"Links","type":"docs"},{"authors":["Janus Valberg-Madsen"],"categories":null,"content":" Intended audience Members of the Aalborg R User Group.\n","date":1540418400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1540418400,"objectID":"fd34c0dbea4eae2987532e65dd5c4c1e","permalink":"https://janusvm.github.io/talk/nse-aalborgrug/","publishdate":"2018-10-25T00:00:00+02:00","relpermalink":"/talk/nse-aalborgrug/","section":"talk","summary":"Metaprogramming is when a computer program has the ability to treat programs as their data, enabling them to read or generate code, or even modify itself while running.\nIt's a technique that became popular with the programming language Lisp, from which R inherits many ideas.\n\nIn this talk, I dive into the inner workings of R and look at how the code you write is represented by the interpreter, give an overview of the tools available in the package [rlang](https://github.com/r-lib/rlang), and show off some common usecases in a [tidyverse](https://github.com/tidyverse/tidyverse) framework.\n","tags":["R","programming","metaprogramming","tidyverse"],"title":"Non-Standard Evaluation and Metaprogramming in R","type":"talk"}]