<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Janus Valberg-Madsen on Janus Valberg-Madsen</title>
    <link>https://janusvm.github.io/</link>
    <description>Recent content in Janus Valberg-Madsen on Janus Valberg-Madsen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Thu, 25 Oct 2018 00:00:00 +0200</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>CSOR2019: Relational Databases And Their Use</title>
      <link>https://janusvm.github.io/talk/aau-csor-db/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0100</pubDate>
      
      <guid>https://janusvm.github.io/talk/aau-csor-db/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Adding dependencies on the fly in a Makefile</title>
      <link>https://janusvm.github.io/2018/10/adding-dependencies-on-the-fly-in-a-makefile/</link>
      <pubDate>Sat, 27 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://janusvm.github.io/2018/10/adding-dependencies-on-the-fly-in-a-makefile/</guid>
      <description>

&lt;p&gt;Imagine the following situation:&lt;/p&gt;

&lt;p&gt;You have a bunch of files that are being built by the same rule in a Makefile, but some of them further depend on some other input files.
It&amp;rsquo;s far from the most of the targets that have these dependences, and those that do depend on different subsets of the extra dependences.
How should the Makefile for this look?&lt;/p&gt;

&lt;p&gt;I found myself in this very situation not long ago, when I was working on the slides for my &lt;a href=&#34;https://janusvm.github.io/talk/aau-git-workshop/&#34;&gt;Git Workshop&lt;/a&gt;, which included a lot of SVG figures depicting commit graphs.
Each of these figures were generated from a &lt;code&gt;.tex&lt;/code&gt; file using Latexmk, so the associated build targets and rule looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;SVG := $(patsubst %.tex,%.svg,$(wildcard figs/*.tex))

$(SVG): %.svg: %.tex
	@cd figs &amp;amp;&amp;amp; \
	latexmk -pdf -quiet $(&amp;lt;F) &amp;amp;&amp;amp; \
	pdf2svg $(&amp;lt;F:.tex=.pdf) $(@F) &amp;amp;&amp;amp; \
	latexmk -C $(&amp;lt;F)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first line defines a list of the eventual SVG files by looking up all the &lt;code&gt;.tex&lt;/code&gt; files in subdirectory &lt;code&gt;figs&lt;/code&gt; and changing their file extensions to &lt;code&gt;.svg&lt;/code&gt;.
In the next line, a &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Static-Usage.html&#34; target=&#34;_blank&#34;&gt;static pattern rule&lt;/a&gt; is telling Make to use the pattern &lt;code&gt;%.svg: %.tex&lt;/code&gt; only for the targets defined in that list.
The files are built by compiling a PDF with &lt;code&gt;pdflatex&lt;/code&gt; (via &lt;code&gt;latexmk&lt;/code&gt;), converting that into an SVG with &lt;code&gt;pdf2svg&lt;/code&gt;, and finally deleting all the auxiliary build files again with &lt;code&gt;latexmk&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So far so good, but there was one problem:
in a few of those SVGs, I included some icons in the form of PDFs from another subdirectory &lt;code&gt;figs/icons&lt;/code&gt;.
To make a long story short, I wanted to use some FontAwesome icons for certain things, which required me to compile with &lt;code&gt;xelatex&lt;/code&gt;, but the graphs in the SVGs got messed up, if I didn&amp;rsquo;t use &lt;code&gt;pdflatex&lt;/code&gt; for those.&lt;/p&gt;

&lt;p&gt;So, as a compromise, I compiled PDF files for each of the FA symbols I needed and input them with &lt;code&gt;\includegraphics&lt;/code&gt; in the graphs, adding the following lines to my Makefile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;PDF := $(patsubst %.tex,%.pdf,$(wildcard figs/icons/*.tex))

$(PDF): %.pdf: %.tex
	@cd figs/icons &amp;amp;&amp;amp; \
	latexmk -xelatex -quiet $(&amp;lt;F) &amp;amp;&amp;amp; \
	latexmk -c $(&amp;lt;F)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same as before, except it uses &lt;code&gt;xelatex&lt;/code&gt; (again via &lt;code&gt;latexmk&lt;/code&gt;) to compile, and there&amp;rsquo;s no conversion to SVG.&lt;/p&gt;

&lt;p&gt;The question was now: how do I express the relationship between the PDF icons and the SVG figures in my Makefile?&lt;/p&gt;

&lt;h3 id=&#34;attempt-1-just-slapping-it-in-there&#34;&gt;Attempt 1: just slapping it in there&lt;/h3&gt;

&lt;p&gt;My first impulse was to simply add the &lt;code&gt;PDF&lt;/code&gt; list as a dependency to &lt;code&gt;SVG&lt;/code&gt;.
Simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;$(SVG): %.svg: %.tex $(PDF)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And sure, it worked, but it caused &lt;strong&gt;every single SVG figure&lt;/strong&gt; to be rebuilt if &lt;strong&gt;any&lt;/strong&gt; PDF icon had been changed.
No good.&lt;/p&gt;

&lt;h3 id=&#34;attempt-2-adding-an-additional-rule-to-a-subset-of-the-svgs&#34;&gt;Attempt 2: adding an additional rule to a subset of the SVGs&lt;/h3&gt;

&lt;p&gt;Then, I had the idea to peek a bit in the files to determine which of the &lt;code&gt;SVG&lt;/code&gt; targets should &lt;em&gt;actually&lt;/em&gt; depend on &lt;code&gt;PDF&lt;/code&gt;, taking advantage of the fact that you can define &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Multiple-Rules.html&#34; target=&#34;_blank&#34;&gt;multiple rules for the same target&lt;/a&gt; (as long as you only have one build recipe):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;SVG_WITH_ICONS := $(shell grep -l &#39;\\includegraphics&#39; figs/*.tex)

$(SVG_WITH_ICONS): $(PDF)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Adding these two lines improved the situation slightly;
only the targets that included at least one PDF icon were rebuilt when the PDF changed, but still all of them for any PDF.
Hmm.&lt;/p&gt;

&lt;h3 id=&#34;attempt-3-enter-metaprogramming&#34;&gt;Attempt 3: enter metaprogramming&lt;/h3&gt;

&lt;p&gt;Long after I gave the talk those figures were for, I finally found an acceptable solution for the problem: Make&amp;rsquo;s &lt;a href=&#34;https://www.gnu.org/software/make/manual/html_node/Eval-Function.html&#34; target=&#34;_blank&#34;&gt;eval function&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Put shortly, you can define a rule which is deferred and can be expanded (&lt;code&gt;eval&lt;/code&gt;&amp;lsquo;ed) in a different context.
This was exactly what I needed, as it allowed me to write automatic, extra rules for each individual &lt;code&gt;SVG&lt;/code&gt; target!
Here&amp;rsquo;s how:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;define PDF_RULE
$T: $(shell grep -hoE &#39;\bicons/.+\b&#39; $(T:.svg=.tex) \
      | sort -u | sed -e &#39;s/$$/.pdf/g&#39; -e &#39;s/^/figs\//g&#39; \
      | paste -s -d &#39; &#39;)
endef

$(foreach T,$(SVG),$(eval $(PDF_RULE)))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a lot going on in &lt;code&gt;PDF_RULE&lt;/code&gt;, so here&amp;rsquo;s a breakdown:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$T&lt;/code&gt; is a variable to be expanded later into the individual files in &lt;code&gt;SVG&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;grep -hoE &#39;\bicons/.+\b&#39; $(T:.svg=.tex)&lt;/code&gt; prints all the occurences of a string starting with &amp;lsquo;icons/&amp;rsquo; in the corresponding &lt;code&gt;.tex&lt;/code&gt; file as individual lines, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;icons/user
icons/laptop
icons/server
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sort -u&lt;/code&gt; sorts the lines and (more importantly) deletes duplicates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;sed -e &#39;s/$$/.pdf/g&#39; -e &#39;s/^/figs\//g&#39;&lt;/code&gt; first appends &lt;code&gt;.pdf&lt;/code&gt; to the end (&lt;code&gt;$&lt;/code&gt;) of the lines, then prepends &lt;code&gt;figs/&lt;/code&gt; to the beginning (&lt;code&gt;^&lt;/code&gt;), e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;figs/icons/user.pdf
figs/icons/laptop.pdf
figs/icons/server.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(since &lt;code&gt;$&lt;/code&gt; is a special character used for expansion in Make, you have to put &lt;code&gt;$$&lt;/code&gt; to treat it as a literal &lt;code&gt;$&lt;/code&gt; symbol)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;lastly, &lt;code&gt;paste -s -d &#39; &#39;&lt;/code&gt; collapses the lines into one line, separated by spaces&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When the &lt;code&gt;foreach&lt;/code&gt; loop is run, the contents of &lt;code&gt;PDF_RULE&lt;/code&gt; is expanded for each of the files in &lt;code&gt;SVG&lt;/code&gt;, resulting in &lt;em&gt;new rules being added at runtime&lt;/em&gt;.
So for example, when expanded for a file which &lt;em&gt;doesn&amp;rsquo;t&lt;/em&gt; include any PDFs, e.g. &lt;code&gt;figs/git-add.svg&lt;/code&gt;, it produces the empty rule&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;figs/git-add.svg:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which does nothing.
However, when expanded for a file which &lt;em&gt;does&lt;/em&gt; include PDFs, e.g. &lt;code&gt;figs/git-push.svg&lt;/code&gt;, the &lt;code&gt;shell&lt;/code&gt; command looks through &lt;code&gt;figs/git-push.tex&lt;/code&gt;, finds the included graphics &lt;code&gt;icons/laptop.pdf&lt;/code&gt; and &lt;code&gt;icons/server.pdf&lt;/code&gt; and creates the rule&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;figs/git-push.svg: figs/icons/laptop.pdf figs/icons/server.pdf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which causes &lt;code&gt;figs/git-push.svg&lt;/code&gt; to be rebuilt whenever those specific PDFs are changed.
So basically, this corresponds to manually writing out rules for each individual SVG file, but it&amp;rsquo;s all done automatically!&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the full Makefile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;SVG := $(patsubst %.tex,%.svg,$(wildcard figs/*.tex))
PDF := $(patsubst %.tex,%.pdf,$(wildcard figs/icons/*.tex))

all: $(SVG)

define PDF_RULE
$T: $(shell grep -hoE &#39;\bicons/.+\b&#39; $(T:.svg=.tex) \
      | sort -u | sed -e &#39;s/$$/.pdf/g&#39; -e &#39;s/^/figs\//g&#39; \
      | paste -s -d &#39; &#39;)
endef

$(foreach T,$(SVG),$(eval $(PDF_RULE)))

$(SVG): %.svg: %.tex
	@cd figs &amp;amp;&amp;amp; \
	latexmk -pdf -quiet $(&amp;lt;F) &amp;amp;&amp;amp; \
	pdf2svg $(&amp;lt;F:.tex=.pdf) $(@F) &amp;amp;&amp;amp; \
	latexmk -C $(&amp;lt;F)

$(PDF): %.pdf: %.tex
	@cd figs/icons &amp;amp;&amp;amp; \
	latexmk -xelatex -quiet $(&amp;lt;F) &amp;amp;&amp;amp; \
	latexmk -c $(&amp;lt;F)

clean:
	@rm -f $(SVG)
	@rm -f $(PDF)
	@cd figs &amp;amp;&amp;amp; latexmk -C
	@cd figs/icons &amp;amp;&amp;amp; latexmk -C

.PHONY: all clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a final comment, I should probably point out that I use GNU Make — I&amp;rsquo;m not sure if any of the above features are GNU specific.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World! (2)</title>
      <link>https://janusvm.github.io/2018/10/hello-world-2/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://janusvm.github.io/2018/10/hello-world-2/</guid>
      <description>

&lt;p&gt;Second time&amp;rsquo;s the charm, right?&lt;/p&gt;

&lt;p&gt;Last time I made an attempt at getting my &lt;code&gt;github.io&lt;/code&gt; site up and running, it ended up being half-baked and I left it unused for over a year.
In the meantime, my number of repositories with GitHub Pages steadily increased, resulting in a bunch of &lt;code&gt;janusvm.github.io/repo&lt;/code&gt; links that were nowhere to be found on what ought to be the root site.&lt;/p&gt;

&lt;p&gt;After giving three talks this month, each with slides on GH Pages, I decided it was time to organise my stuff and update this website.
Being an R enthusiast, it was a no-brainer for me to use &lt;a href=&#34;https://bookdown.org/yihui/blogdown/&#34; target=&#34;_blank&#34;&gt;blogdown&lt;/a&gt;, and following the recommendation in the book, I opted for the &lt;a href=&#34;https://sourcethemes.com/academic/&#34; target=&#34;_blank&#34;&gt;Academic Hugo theme&lt;/a&gt; for its nice defaults, extra features, and customisation options.&lt;/p&gt;

&lt;h2 id=&#34;theme-customisations&#34;&gt;Theme customisations&lt;/h2&gt;

&lt;p&gt;The Academic theme has eight built-in colour themes and three font themes, but none of them hit the mark 100% for me.
When it comes to colour themes, I&amp;rsquo;m hopelessly in love with &lt;a href=&#34;https://github.com/arcticicestudio/nord&#34; target=&#34;_blank&#34;&gt;Nord&lt;/a&gt; — I use it for Emacs, Bash, and whatever else that lets me configure its interface colours.
Here&amp;rsquo;s how I&amp;rsquo;ve set it up on this site:&lt;/p&gt;

&lt;p&gt;In a file called &lt;code&gt;/data/themes/nord.toml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Theme metadata
name = &amp;quot;Nord&amp;quot;

# Is theme light or dark?
light = true

# Primary
primary = &amp;quot;#bf616a&amp;quot;
primary_light = &amp;quot;#d08770&amp;quot;
primary_dark = &amp;quot;#a5545b&amp;quot;

# Menu
menu_primary = &amp;quot;#3b4252&amp;quot;
menu_text = &amp;quot;#eceff4&amp;quot;
menu_text_active = &amp;quot;#88c0d0&amp;quot;
menu_title = &amp;quot;#eceff4&amp;quot;

# Home sections
home_section_odd = &amp;quot;#fff&amp;quot;
home_section_even = &amp;quot;#eff2f7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then in my &lt;code&gt;config.toml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;color_theme = &amp;quot;nord&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This sets the colours of just about everything except for code blocks.
&lt;a href=&#34;https://highlightjs.org/&#34; target=&#34;_blank&#34;&gt;Highlight.js&lt;/a&gt; &lt;em&gt;does&lt;/em&gt; have the Nord theme, but it turns out it isn&amp;rsquo;t on the CDNJS server yet, which means that you can&amp;rsquo;t just put &lt;code&gt;highlight_style = &amp;quot;nord&amp;quot;&lt;/code&gt; in &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Instead, download &lt;code&gt;nord.css&lt;/code&gt; from the &lt;a href=&#34;https://github.com/highlightjs/highlight.js&#34; target=&#34;_blank&#34;&gt;repository&lt;/a&gt;, put it in &lt;code&gt;/static/css&lt;/code&gt;, and add &lt;code&gt;&amp;quot;nord.css&amp;quot;&lt;/code&gt; to the &lt;code&gt;custom_css&lt;/code&gt; array in the config, e.g.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;custom_css = [&amp;quot;nord.css&amp;quot;, &amp;quot;fonts/iosevka.css&amp;quot;, &amp;quot;custom.css&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The other two CSS files in there define the &lt;a href=&#34;https://github.com/be5invis/Iosevka&#34; target=&#34;_blank&#34;&gt;Iosevka&lt;/a&gt; font face and some miscellaneous adjustments, respectively.
I have used many different monospace fonts for coding, but after recently discovering Iosevka, I may finally have found a font to settle down with.&lt;/p&gt;

&lt;p&gt;The fonts used on the site are customised via the file &lt;code&gt;/data/fonts/custom.toml&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# Font style metadata
name = &amp;quot;Custom&amp;quot;

# Optional Google font URL
google_fonts = &amp;quot;Abel|Roboto:400,400italic,700|Roboto+Condensed:300&amp;quot;

# Font families
heading_font = &amp;quot;Abel&amp;quot;
body_font = &amp;quot;Roboto&amp;quot;
nav_font = &amp;quot;Roboto Condensed&amp;quot;
mono_font = &amp;quot;Iosevka SS04 Web&amp;quot;

# Font size
font_size = &amp;quot;20&amp;quot;
font_size_small = &amp;quot;16&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and the config entry:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;font = &amp;quot;custom&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;deployment&#34;&gt;Deployment&lt;/h2&gt;

&lt;p&gt;It turns out to be relatively simple to have the source files in one repository and the published site in another, if you&amp;rsquo;re comfortable using git submodules:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create the repository &lt;code&gt;user.github.io&lt;/code&gt; on GitHub (where &lt;code&gt;user&lt;/code&gt; is your username)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you don&amp;rsquo;t initialise it with any files, push an empty commit (from a temporary folder somewhere else) to it first:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git init
git commit -m &amp;quot;Initial commit&amp;quot; --allow-empty
git remote add origin https://github.com/user/user.github.io.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;From the folder with your blog source (assuming it&amp;rsquo;s already a git repository), add &lt;code&gt;user.github.io&lt;/code&gt; as a submodule in &lt;code&gt;/public&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf public
git submodule add -b master https://github.com/user/user.github.io.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build the site:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Commit and push the submodule:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd public
git add .
git commit -m &amp;quot;Build site&amp;quot;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After that, the site is deployed.
In my experience, GitHub Pages sometimes don&amp;rsquo;t actually build the site the first time you push after activating Pages, so if nothing shows up after a few minutes, try pushing another commit.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;I found &lt;a href=&#34;https://lmyint.github.io/post/hugo-academic-tips&#34; target=&#34;_blank&#34;&gt;this post&lt;/a&gt; by Leslie Myint in addition to &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github&#34; target=&#34;_blank&#34;&gt;Hugo&amp;rsquo;s hosting guide&lt;/a&gt; and the &lt;a href=&#34;https://sourcethemes.com/academic/docs&#34; target=&#34;_blank&#34;&gt;Academic theme documentation&lt;/a&gt; to be very helpful when setting up this site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Git Workshop</title>
      <link>https://janusvm.github.io/talk/aau-git-workshop/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://janusvm.github.io/talk/aau-git-workshop/</guid>
      <description>

&lt;h3 id=&#34;intended-audience&#34;&gt;Intended audience&lt;/h3&gt;

&lt;p&gt;First year Math/Math-Econ/Math-Tech students at Aalborg University.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LaTeX Workshop</title>
      <link>https://janusvm.github.io/talk/aau-latex-workshop/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://janusvm.github.io/talk/aau-latex-workshop/</guid>
      <description>

&lt;h3 id=&#34;intended-audience&#34;&gt;Intended audience&lt;/h3&gt;

&lt;p&gt;First year Math/Math-Econ/Math-Tech students at Aalborg University.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://janusvm.github.io/resource/git-links/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://janusvm.github.io/resource/git-links/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Slides from my &lt;a href=&#34;../../talk/aau-git-workshop&#34;&gt;Git Workshop&lt;/a&gt;: &lt;a href=&#34;https://janusvm.github.io/aau-git-workshop&#34; target=&#34;_blank&#34;&gt;janusvm.github.io/aau-git-workshop&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Very simple introduction to Git: &lt;a href=&#34;http://think-like-a-git.net/&#34; target=&#34;_blank&#34;&gt;think-like-a-git.net&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;More comprehensive tutorials: &lt;a href=&#34;https://www.atlassian.com/git/tutorials&#34; target=&#34;_blank&#34;&gt;www.atlassian.com/git/tutorials&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Tips on writing commit messages: &lt;a href=&#34;https://chris.beams.io/posts/git-commit/&#34; target=&#34;_blank&#34;&gt;chris.beams.io/posts/git-commit&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Fixing mistakes: &lt;a href=&#34;http://sethrobertson.github.io/GitFixUm/fixup.html&#34; target=&#34;_blank&#34;&gt;sethrobertson.github.io/GitFixUm/fixup.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Non-Standard Evaluation and Metaprogramming in R</title>
      <link>https://janusvm.github.io/talk/nse-aalborgrug/</link>
      <pubDate>Thu, 25 Oct 2018 00:00:00 +0200</pubDate>
      
      <guid>https://janusvm.github.io/talk/nse-aalborgrug/</guid>
      <description>

&lt;h3 id=&#34;intended-audience&#34;&gt;Intended audience&lt;/h3&gt;

&lt;p&gt;Members of the &lt;a href=&#34;https://meetu.ps/c/3yFNb/CQYc2/d&#34; target=&#34;_blank&#34;&gt;Aalborg R User Group&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
